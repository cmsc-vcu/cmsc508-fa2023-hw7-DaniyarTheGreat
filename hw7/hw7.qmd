---
title: Homework 7 - Creating a resume database
author: Saifuding Daniyaer
date: 11/13/23
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

Inside this document, includes varies queries used to retrieve specific information from the database we designed.


GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-DaniyarTheGreat

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The database has five tables: skills, people, roles, peopleroles, peopleskills; each table has its own primary key. Tables like peopleroles and peopleskills contains foreign keys to build connection between different tables.

## Crows-foot diagram

Below is a crows-foot diagram of the database, visualizing the connection between each tables.

```{mermaid}
%%| echo: false
erDiagram
    people }|--|{ peopleroles : has
    peopleroles }|--|{ roles : has
    people }|--|{ peopleskills : shares
    skills }|--|{ peopleskills : shares
  
    people {
        Primary people_id
        varchar(256) people_first_name
        varchar(256) people_last_name
        varchar(256) people_email
        varchar(256) people_linkedin_url
        varchar(256) people_head_url
        varchar(256) people_discord_handle
        varchar(256) people_brief_bio
        date people_date_joined
    }

    skills {
        Primary skills_id
        varchar(255) skills_description
        varchar(255) skills_tag
        varchar(255) skills_url
        int skills_time_commitment
    }

    roles {
        Primary role_id
        varchar(256) name
        int sort_priority
    }

    peopleskills {
        Primary id
        Foreign skills_id
        Foregin people_id
        date date_acquired
    }

    peopleroles {
        Primary id
        Foreign people_id
        Foreign role_id
        date date_assigned
    }
```

## Examples of data in the database

* skills Table: This table holds information about various skills, identified by a unique skills_id. It includes the name, description, optional tag and URL, and an optional time commitment field for each skill.

* people Table: This table contains personal information about individuals, like their name, email, LinkedIn URL, headshot URL, Discord handle, a brief bio, and the date they joined. Each person is uniquely identified by people_id.

* roles Table: This table lists various roles (like Designer, Developer, etc.) each with a unique role_id and a sort priority.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from skills;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from roles;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

```{python}
sql = f"""
select skills_name, skills_tag, skills_description from skills order by skills_name; 
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
sql = f"""
select people_last_name, people_email from people order by people_last_name; 
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1

```{python}
sql = f"""
select
skills_name
from 
    peopleskills a
    inner join people b on (a.people_id=b.people_id)
    inner join skills c on (a.skills_id=c.skills_id)
where
    people_last_name='Person 1'
;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6

```{python}
sql = f"""
select
    people_last_name
from 
    peopleskills a
    inner join people b on (a.people_id=b.people_id)
    inner join skills c on (a.skills_id=c.skills_id)
where
    skills_tag = 'Skill 6'
;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role

```{python}
sql = f"""
select
    people_last_name
from 
    peopleroles a
    inner join people b on (a.people_id=b.people_id)
    inner join roles c on (a.role_id=c.role_id)
where
    c.name = 'Developer'
;
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills

```{python}
sql = f"""
select
    people_last_name, people_email
from 
    people a
    left join peopleskills b on (a.people_id=b.people_id)
where
    b.people_id is NULL
;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills

```{python}
sql = f"""
select
    skills_name, skills_tag
from 
    skills a
    left join peopleskills b on (a.skills_id=b.skills_id)
where
    b.people_id is NULL
;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role

```{python}
sql = f"""
select 
    p.people_first_name, 
    p.people_last_name, 
    s.skills_name
from 
    people p
join 
    peopleroles pr on p.people_id = pr.people_id
join 
    roles r on pr.role_id = r.role_id
join 
    peopleskills ps on p.people_id = ps.people_id
join 
    skills s on ps.skills_id = s.skills_id
where 
    r.name = 'Boss';

"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles

```{python}
sql = f"""
select
    r.role_id, r.name
from 
    roles r
    left join peopleroles pr on r.role_id = pr.role_id
where
    pr.people_id IS NULL;

"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection

Coming up with crows foot diagram was more challenging than writting the queries. Maybe it's just my issue, I had harder time figuring out the relationships of each tables than coming up with the queries.

